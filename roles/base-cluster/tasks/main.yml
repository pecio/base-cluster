---
# Non Pacemaker specific setup
- name: Setup clock
  block:
    - name: Time zone
      timezone:
        hwclock: UTC
        name: '{{ timezone }}'
  rescue:
    - name: Remove /etc/localtime
      file:
        path: /etc/localtime
        state: absent
    - name: Set time zone again
      timezone:
        hwclock: UTC
        name: '{{ timezone }}'
- name: Enable chronyd
  systemd:
    name: chronyd
    state: started
    enabled: True
- name: Remove name from /etc/hosts so it does not resolve 127.0.0.1
  lineinfile:
    path: /etc/hosts
    regexp: '{{ ansible_hostname }}'
    state: absent
- name: Disable firewalld
  systemd:
      name: firewalld.service
      enabled: False
      state: stopped
# Pacemaker requisites
- name: Enable HighAvailability repository (CentOS 8)
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version|int > 7
  # yum_repository seems not to be able to enable an existing repository :(
  lineinfile:
    path: /etc/yum.repos.d/CentOS-HA.repo
    regexp: 'enabled='
    line: 'enabled=1'
    backup: False
- name: Software packages
  package:
    name:
      - pcs
      - pacemaker
      - fence-agents-sbd
      - sbd
      - watchdog
- name: Enable pcsd
  systemd:
    name: pcsd.service
    enabled: True
    state: started
# Storage Based Death requisites
- name: Load softdog module
  modprobe:
    name: softdog
- name: Enable softdog module on boot
  lineinfile:
    path: /etc/modules-load.d/softdog.conf
    line: softdog
    create: True
- name: Enable module loading on boot
  systemd:
    name: systemd-modules-load.service
    enabled: True
- name: Configure watchdog
  lineinfile:
    path: /etc/watchdog.d/device.conf
    line: "watchdog-device = /dev/watchdog"
    create: True
- name: Enable watchdog-ping
  systemd:
    name: watchdog-ping.service
    enabled: True
    state: started
# Create cluster
- name: Check if authenticated
  stat:
    path: /var/lib/pcsd/tokens
  register: tokens
- name: Password for hacluster
  when: not tokens.stat.exists
  user:
    name: hacluster
    password: '{{ pacemaker_password | password_hash("sha512") }}'
    update_password: always
- name: Authenticate cluster
  run_once: True
  command:
    # Command is "pcs cluster auth" on CentOS 7 but "pcs host auth" on CentOS 8
    cmd: '/sbin/pcs {% if ansible_distribution_major_version|int == 7 %}cluster{% else %}host{% endif %} auth {{ ansible_play_hosts | join(" ") }} -u hacluster'
    stdin: '{{ pacemaker_password }}'
    creates: /var/lib/pcsd/tokens
- name: Create cluster
  run_once: True
  command:
    # Name is optional on CentOS 7 but mandatory on CentOS 8
    cmd: '/sbin/pcs cluster setup {% if ansible_distribution_major_version|int == 7 %}--name{% endif %} "{{ pacemaker_name }}" {{ ansible_play_hosts | join(" ") }} --enable'
    creates: /var/lib/pacemaker/cib/cib.xml
- name: Start cluster
  pacemaker_cluster:
    state: online
# Setup Storage Based Death
- name: Configure sbd daemon
  template:
    src: sbd.j2
    dest: /etc/sysconfig/sbd
    backup: True
- name: Check if headers created
  command:
    cmd: '/bin/dd bs=8 count=1 if={{ item }}'
  register: header
  loop: '{{ sbd_devices }}'
- name: Create device headers
  run_once: True
  when: (header.results | selectattr("item", "eq", item) | first)["stdout"] != 'SBD_SBD_'
  command:
    cmd: '/sbin/pcs stonith sbd device setup --force --device={{ item }}'
  loop: '{{ sbd_devices }}'
- name: Enable sbd daemon
  systemd:
    name: sbd.service
    enabled: True
  notify:
    - Restart Pacemaker
- name: Check if STONITH SBD resource exists
  run_once: True
  command:
    cmd: '/sbin/pcs config'
  register: stonith_config
- name: Create STONITH SBD resource
  run_once: True
  when: stonith_config.stdout.find(' sbd (class=stonith type=fence_sbd)') == -1
  command:
    cmd: '/sbin/pcs stonith create sbd fence_sbd devices={{ sbd_devices | join(";") }}'
  notify:
    - Restart Pacemaker
...