---
# Non Pacemaker specific setup
- name: Setup clock
  when: timezone is defined
  block:
    - name: Time zone
      timezone:
        hwclock: UTC
        name: '{{ timezone }}'
  rescue:
    - name: Remove /etc/localtime
      file:
        path: /etc/localtime
        state: absent
    - name: Set time zone again
      timezone:
        hwclock: UTC
        name: '{{ timezone }}'
- name: Chrony installed
  package:
    name: chrony
    state: present
- name: Enable chronyd
  systemd:
    name: chronyd
    state: started
    enabled: True
- name: Python SELinux bindings
  package:
    name: libselinux-python
    state: present
  when: ansible_distribution == 'Fedora' and ansible_distribution_major_version|int < 30
- name: Setup /etc/hosts
  when: setup_etc_hosts
  block:
    - name: Remove Vagrant 127.0.[12].1 entry from /etc/hosts
      lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.[12]\.1\s+{{ ansible_hostname }}'
        state: absent
    - name: Cluster nodes in /etc/hosts
      blockinfile:
        path: /etc/hosts
        block: '{{ lookup("template", "hosts.j2") }}'
        marker: '# {mark} Pacemaker cluster nodes'
- name: Disable firewalld
  when: ansible_os_family == 'RedHat'
  systemd:
      name: firewalld.service
      enabled: False
      state: stopped
# Pacemaker requisites
- name: Enable HighAvailability repository (CentOS 8)
  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version|int > 7
  # yum_repository seems not to be able to enable an existing repository :(
  lineinfile:
    path: /etc/yum.repos.d/CentOS-Linux-HighAvailability.repo
    regexp: 'enabled='
    line: 'enabled=1'
    backup: False
- name: Software packages
  package:
    name:
      - pcs
      - pacemaker
      - "{% if ansible_os_family == 'RedHat' %}fence-agents-sbd{% else %}fence-agents{% endif %}"
      - sbd
      - watchdog
- name: Enable pcsd
  systemd:
    name: pcsd.service
    enabled: True
    state: started
# Storage Based Death requisites
- name: Load softdog module
  modprobe:
    name: softdog
- name: Enable softdog module on boot
  lineinfile:
    path: /etc/modules-load.d/softdog.conf
    line: softdog
    create: True
- name: Enable module loading on boot
  systemd:
    name: systemd-modules-load.service
    enabled: True
- name: Configure watchdog
  lineinfile:
    path: /etc/watchdog.d/device.conf
    line: "watchdog-device = /dev/watchdog"
    create: True
- name: watchdog.service override directory (Debian)
  when: ansible_os_family == 'Debian'
  file:
    path: /etc/systemd/system/watchdog.service.d
    state: directory
- name: Parametrize watchdog.service (Debian)
  when: ansible_os_family == 'Debian'
  copy:
    src: watchdog.service.override.conf
    dest: /etc/systemd/system/watchdog.service.d/override.conf
- name: Enable watchdog
  systemd:
    name: "{% if ansible_os_family == 'RedHat' %}watchdog-ping.service{% else %}watchdog.service{% endif %}"
    enabled: True
    state: started
# Create cluster
- name: Set pcs path and syntax variant
  set_fact:
    pcs: "{%
            if (ansible_distribution == 'Debian' and ansible_distribution_major_version|int < 10)
            or (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int < 19)
          %}/usr{%
            endif
          %}/sbin/pcs"
    oldsyntax: "{%
                  if (ansible_distribution == 'CentOS' and ansible_distribution_major_version|int < 8)
                  or (ansible_distribution == 'Fedora' and ansible_distribution_major_version|int < 29)
                  or (ansible_distribution == 'Debian' and ansible_distribution_major_version|int < 10)
                  or (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int < 20)
                %}True{%
                  else
                %}False{%
                  endif
                %}"
- name: Check for Debian default configuration
  when: ansible_os_family == 'Debian'
  lineinfile:
    path: /etc/corosync/corosync.conf
    regexp: '{% if oldsyntax|bool %}bindnetaddr{% else %}ring0_addr{% endif %}: 127\.0\.0\.1'
    state: absent
  check_mode: True
  register: corosync_default
- name: Remove Debian default configuration
  command:
    cmd: "{{ pcs }} cluster destroy"
  when: corosync_default.changed
- name: Check if authenticated
  stat:
    path: /var/lib/pcsd/tokens
  register: tokens
- name: Password for hacluster
  when: not tokens.stat.exists
  user:
    name: hacluster
    password: '{{ pacemaker_password | password_hash("sha512") }}'
    update_password: always
- name: Authenticate cluster
  run_once: True
  command:
    # Command is "pcs cluster auth" on CentOS 7 and Debian 9
    # but "pcs host auth" on CentOS 8 and Debian 10
    cmd: |
      {{ pcs }}
      {% if oldsyntax|bool %}
          cluster
      {% else %}
          host
      {% endif %}
      auth
      {% for host in ansible_play_hosts %}
          {% if setup_etc_hosts and setup_etc_hosts_domain is defined %}
              {% if oldsyntax|bool %}
                  {{ host }}.{{ setup_etc_hosts_domain }}
              {% else %}
                  {{ host }} addr={{ host }}.{{ setup_etc_hosts_domain }}
              {% endif %}
          {% else %}
              {{ host }}
          {% endif %}
      {% endfor %}
      -u hacluster
    stdin: '{{ pacemaker_password }}'
    creates: /var/lib/pcsd/tokens
- name: Create cluster
  run_once: True
  command:
    # Name is optional on CentOS 7 and Debian 9 but mandatory on CentOS 8 and Debian 10
    cmd: |
      {{ pcs }}
      cluster setup 
      {% if oldsyntax|bool %}--name {% endif %}
      "{{ pacemaker_name }}"
      {% for host in ansible_play_hosts %}
          {% if oldsyntax|bool %}
              {% if setup_etc_hosts and setup_etc_hosts_domain is defined %}
                  {{ host }}.{{ setup_etc_hosts_domain }}
              {% else %}
                  {{ host }}
              {% endif %}
          {% else %}
              {% if pacemaker_iface is defined %}
                  {{ host }} addr={{ hostvars[host]['ansible_'+pacemaker_iface].ipv4.address }}
              {% else %}
                  {{ host }}
              {% endif %}
          {% endif %}
      {% endfor %}
      --enable
    creates: /var/lib/pacemaker/cib/cib.xml
- name: Start cluster
  pacemaker_cluster:
    state: online
# Setup Storage Based Death
- name: Fix sbd libraries (Debian 9)
  when: ansible_distribution == 'Debian' and ansible_distribution_major_version|int < 10
  file:
    path: /usr/lib/libpe_status.so.10
    state: link
    src: /usr/lib/x86_64-linux-gnu/libpe_status.so.16.1.0
- name: Configure sbd daemon
  template:
    src: sbd.j2
    dest: "/etc/{% if ansible_os_family == 'RedHat' %}sysconfig{% else %}default{% endif %}/sbd"
    backup: True
- name: Check if headers created
  command:
    cmd: '/bin/dd bs=8 count=1 if={{ item }}'
  register: header
  loop: '{{ sbd_devices }}'
- name: Create device headers
  run_once: True
  when: (header.results | selectattr("item", "eq", item) | first)["stdout"] != 'SBD_SBD_'
  command:
    cmd: |
      {% if ansible_os_family == 'Debian' and oldsyntax|bool %}
          /usr/sbin/sbd -d {{ item }} create
      {% else %}
          {{ pcs }} stonith sbd device setup --force --device={{ item }}
      {% endif %}
  loop: '{{ sbd_devices }}'
- name: Enable sbd daemon
  systemd:
    name: sbd.service
    enabled: True
- name: Check if STONITH SBD resource exists
  run_once: True
  command:
    cmd: '{{ pcs }} config'
  register: stonith_config
- name: Create STONITH SBD resource
  run_once: True
  when: stonith_config.stdout.find(' sbd (class=stonith type=fence_sbd)') == -1
  command:
    cmd: |
      {{ pcs }} stonith create sbd fence_sbd
      devices={{ sbd_devices | join(",") }}
      {% if ansible_os_family == 'Debian' and oldsyntax|bool %}
          sbd_path=/usr/sbin/sbd
      {% endif %}
...